/**
 *
 * We are given 2 sorted arrays of integers. We are asked to find the kth smallest
 * product generated by multiplying the indexes of each array with each other.
 * This intuition behind this problem lies behind the fact that these arrays are sorted
 * which means we can perform a binary search for the answer.
 *
 */

function countLE(nums1: number[], nums2: number[], x: number): number {
  let count = 0;
  const n = nums2.length;

  for (const a of nums1) {
    if (a > 0) {
      let l = 0,
        r = n;
      while (l < r) {
        let m = Math.floor((l + r) / 2);
        if (a * nums2[m] <= x) l = m + 1;
        else r = m;
      }
      count += l;
    } else if (a < 0) {
      let l = 0,
        r = n;
      while (l < r) {
        let m = Math.floor((l + r) / 2);
        if (a * nums2[m] <= x) r = m;
        else l = m + 1;
      }
      count += n - l;
    } else {
      if (x >= 0) count += n;
    }
  }

  return count;
}
function kthSmallestProduct(
  nums1: number[],
  nums2: number[],
  k: number
): number {
  let left = -1e10,
    right = 1e10;

  while (left < right) {
    const mid = Math.floor((left + right) / 2);
    if (countLE(nums1, nums2, mid) >= k) {
      right = mid;
    } else {
      left = mid + 1;
    }
  }
  return left;
}

console.log(kthSmallestProduct([2, 5], [3, 4], 2));

/**
 *
 * Time complexity is O((m + n) * logR)
 * Space complexity is O(1)
 *
 */
